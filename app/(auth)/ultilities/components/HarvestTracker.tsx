// components/HarvestTracker.tsx

"use client"

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { CheckCheckIcon, TrashIcon, ClipboardIcon, ClipboardCheckIcon, PlusCircleIcon } from 'lucide-react'
import { toast } from 'react-toastify'
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog'
import {format} from "date-fns";

export default function HarvestTracker() {
  const [totalWeight, setTotalWeight] = useState(0)
  const [currentWeight, setCurrentWeight] = useState('')
  const [history, setHistory] = useState<{ weight: number; timestamp: Date }[]>([])
  const [success, setSuccess] = useState(false)
  const [copied, setCopied] = useState(false)
  const [openAlert, setOpenAlert] = useState(false)

  // 1. ƒê·ªçc d·ªØ li·ªáu t·ª´ localStorage khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const savedTotalWeight = localStorage.getItem("harvestTotalWeight")
    const savedHistory = localStorage.getItem("harvestHistory")

    if (savedTotalWeight) {
      setTotalWeight(parseFloat(savedTotalWeight))
    }
    if (savedHistory) {
      // D·ªØ li·ªáu trong localStorage l∆∞u ·ªü d·∫°ng string, n√™n c·∫ßn JSON.parse ƒë·ªÉ chuy·ªÉn l·∫°i th√†nh m·∫£ng object
      setHistory(JSON.parse(savedHistory))
    }
  }, [])

  // 2. M·ªói khi totalWeight thay ƒë·ªïi, c·∫≠p nh·∫≠t localStorage
  useEffect(() => {
    localStorage.setItem("harvestTotalWeight", totalWeight.toString())
  }, [totalWeight])

  // 3. M·ªói khi history thay ƒë·ªïi, c·∫≠p nh·∫≠t localStorage
  useEffect(() => {
    localStorage.setItem("harvestHistory", JSON.stringify(history))
  }, [history])

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (currentWeight) {
      const weight = parseFloat(currentWeight)
      setTotalWeight(prevTotal => prevTotal + weight)
      setHistory(prevHistory => [...prevHistory, { weight, timestamp: new Date() }])
      setCurrentWeight('')
      setSuccess(true)
      toast.success("C√¢n n·∫∑ng ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!")
      setTimeout(() => setSuccess(false), 3000) // Th√¥ng b√°o t·ª± ƒë·ªông bi·∫øn m·∫•t sau 3 gi√¢y
    }
  }

  // H√†nh ƒë·ªông x√≥a to√†n b·ªô d·ªØ li·ªáu
  const handleReset = () => {
    // Ch·ªâ cho ph√©p m·ªü AlertDialog n·∫øu history c√≥ d·ªØ li·ªáu
    if (history.length === 0) return
    setOpenAlert(true)
  }

  const confirmReset = () => {
    setTotalWeight(0)
    setHistory([])
    setOpenAlert(false)
    toast.info("L·ªãch s·ª≠ c√¢n n·∫∑ng ƒë√£ ƒë∆∞·ª£c x√≥a.")

    // C·∫≠p nh·∫≠t localStorage v·ªÅ r·ªóng
    localStorage.setItem("harvestTotalWeight", "0")
    localStorage.setItem("harvestHistory", JSON.stringify([]))
  }

  const cancelReset = () => {
    setOpenAlert(false)
  }

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(`${totalWeight?.toFixed(2)}`)
      setCopied(true)
      toast.success("ƒê√£ sao ch√©p t·ªïng c√¢n n·∫∑ng!")
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      toast.error("Sao ch√©p th·∫•t b·∫°i!")
    }
  }

  return (
      <div className="h-auto max-h-screen bg-slate-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-lg shadow-lg rounded-lg bg-white">
          <CardHeader className="border-b">
            <CardTitle className="text-3xl font-extrabold text-slate-800">üåæ S·ªï c√¢n n·∫∑ng</CardTitle>
          </CardHeader>
          <CardContent className="py-6">
            {/* Form Th√™m C√¢n N·∫∑ng */}
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="flex items-center space-x-4">
                <Input
                    type="number"
                    value={currentWeight}
                    onChange={(e) => setCurrentWeight(e.target.value)}
                    placeholder="Nh·∫≠p c√¢n n·∫∑ng (kg)"
                    step="0.01"
                    required
                    className="flex-1 px-4 py-3 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-lime-500 transition"
                />
                <Button
                    type="submit"
                    className="flex items-center px-4 py-3 bg-lime-600 text-white rounded-lg hover:bg-lime-700 transition"
                >
                  <PlusCircleIcon className="w-5 h-5 mr-2" />
                  Th√™m
                </Button>
              </div>
            </form>

            {/* Hi·ªÉn Th·ªã L·ªãch S·ª≠ Nh·∫≠p Li·ªáu */}
            {history.length > 0 && (
                <div className="mt-6">
                  <h2 className="text-2xl font-semibold text-slate-700 mb-4">üìú L·ªãch S·ª≠ Nh·∫≠p</h2>
                  <ul className="max-h-48 overflow-y-auto space-y-2 scrollbar-thin scrollbar-thumb-lime-500 scrollbar-track-slate-100 scrollbar-thumb-rounded-full scrollbar-track-rounded-full hover:scrollbar-thumb-lime-700">
                    {history.map((entry, index) => (
                        <li key={index} className="flex items-center justify-between p-3 bg-slate-50 border border-slate-200 rounded-lg shadow-sm">
                          <div>
                            <p className="text-lg font-medium text-slate-800">{entry.weight?.toFixed(2)} kg</p>
                            <p className="text-sm text-slate-500">{format(entry.timestamp, 'HH:mm dd-MM-yyyy')}</p>
                          </div>
                        </li>
                    ))}
                  </ul>
                  <AlertDialog open={openAlert} onOpenChange={setOpenAlert}>
                    <AlertDialogTrigger asChild>
                      <Button
                          type="button"
                          onClick={handleReset}
                          className="mt-4 flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition"
                      >
                        <TrashIcon className="w-5 h-5 mr-2" />
                        X√≥a L·ªãch S·ª≠
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>X√≥a L·ªãch S·ª≠ C√¢n N·∫∑ng</AlertDialogTitle>
                        <AlertDialogDescription>
                          B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ c√¢n n·∫∑ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel onClick={cancelReset}>H·ªßy</AlertDialogCancel>
                        <AlertDialogAction onClick={confirmReset}>X√≥a</AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                </div>
            )}

            {/* Hi·ªÉn Th·ªã T·ªïng C√¢n N·∫∑ng */}
            <div className="mt-8 text-center">
              <div className="space-x-2">
                <p className="text-xl text-slate-600">T·ªïng C√¢n N·∫∑ng Hi·ªán T·∫°i:</p>
                <div className='flex items-center justify-center '>
                  <p className="text-4xl font-bold text-lime-600">{totalWeight?.toFixed(2)} kg</p>
                </div>
                <div className='flex items-center justify-end'>
                  <Button
                      type="button"
                      onClick={handleCopy}
                      className="ml-2 p-2 bg-slate-200 text-slate-700 rounded-full hover:bg-slate-300 transition"
                  >
                    {copied ? <ClipboardCheckIcon className="w-5 h-5" /> : <ClipboardIcon className="w-5 h-5" />} Sao ch√©p
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
  )
}
