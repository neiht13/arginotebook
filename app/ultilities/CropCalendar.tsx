"use client"

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { ChevronDown } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'

const cropData = {
  rice: [
    { 
      stage: 'Gieo m·∫°', 
      duration: '15-20 ng√†y',
      recommendations: [
        'Chu·∫©n b·ªã ƒë·∫•t k·ªπ, ƒë·∫£m b·∫£o ƒë·ªô ·∫©m th√≠ch h·ª£p',
        'S·ª≠ d·ª•ng h·∫°t gi·ªëng ch·∫•t l∆∞·ª£ng cao',
        'Ki·ªÉm so√°t m·ª±c n∆∞·ªõc trong ru·ªông m·∫°'
      ]
    },
    { 
      stage: 'C·∫•y', 
      duration: '1-2 ng√†y',
      recommendations: [
        'C·∫•y khi c√¢y m·∫° ƒë·∫°t 3-4 l√°',
        'ƒê·∫£m b·∫£o kho·∫£ng c√°ch c·∫•y ph√π h·ª£p',
        'C·∫•y n√¥ng v√† th·∫≥ng h√†ng'
      ]
    },
    { 
      stage: 'ƒê·∫ª nh√°nh', 
      duration: '15-20 ng√†y',
      recommendations: [
        'Duy tr√¨ m·ª±c n∆∞·ªõc th√≠ch h·ª£p',
        'B√≥n ph√¢n c√¢n ƒë·ªëi NPK',
        'Theo d√µi v√† ph√≤ng tr·ª´ s√¢u b·ªánh'
      ]
    },
    { 
      stage: 'L√†m ƒë√≤ng', 
      duration: '20-25 ng√†y',
      recommendations: [
        'TƒÉng c∆∞·ªùng b√≥n ph√¢n kali',
        'Ki·ªÉm so√°t m·ª±c n∆∞·ªõc ƒë·ªÉ tr√°nh ng·∫≠p √∫ng',
        'Ph√≤ng tr·ª´ s√¢u cu·ªën l√°, ƒë·∫°o √¥n'
      ]
    },
    { 
      stage: 'Tr·ªï b√¥ng', 
      duration: '7-10 ng√†y',
      recommendations: [
        'Duy tr√¨ ƒë·ªô ·∫©m ƒë·∫•t th√≠ch h·ª£p',
        'Tr√°nh s·ª≠ d·ª•ng thu·ªëc tr·ª´ s√¢u trong giai ƒëo·∫°n n√†y',
        'B·∫£o v·ªá b√¥ng l√∫a kh·ªèi c√°c t√°c ƒë·ªông b√™n ngo√†i'
      ]
    },
    { 
      stage: 'Ch√≠n', 
      duration: '25-30 ng√†y',
      recommendations: [
        'Gi·∫£m d·∫ßn m·ª±c n∆∞·ªõc trong ru·ªông',
        'Chu·∫©n b·ªã c√¥ng c·ª• thu ho·∫°ch',
        'Thu ho·∫°ch khi 85-90% h·∫°t ch√≠n v√†ng'
      ]
    },
  ],
  corn: [
    { 
      stage: 'Gieo h·∫°t', 
      duration: '5-7 ng√†y',
      recommendations: [
        'Ch·ªçn gi·ªëng ng√¥ ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán ƒë·ªãa ph∆∞∆°ng',
        'X·ª≠ l√Ω h·∫°t gi·ªëng tr∆∞·ªõc khi gieo',
        'ƒê·∫£m b·∫£o ƒë·ªô s√¢u gieo h·∫°t th√≠ch h·ª£p'
      ]
    },
    { 
      stage: 'N·∫£y m·∫ßm', 
      duration: '7-10 ng√†y',
      recommendations: [
        'Duy tr√¨ ƒë·ªô ·∫©m ƒë·∫•t th√≠ch h·ª£p',
        'B·∫£o v·ªá c√¢y con kh·ªèi c√¥n tr√πng g√¢y h·∫°i',
        'Chu·∫©n b·ªã k·∫ø ho·∫°ch t∆∞·ªõi ti√™u'
      ]
    },
    { 
      stage: 'Ph√°t tri·ªÉn th√¢n l√°', 
      duration: '30-40 ng√†y',
      recommendations: [
        'B√≥n ph√¢n ƒë·∫ßy ƒë·ªß theo nhu c·∫ßu c·ªßa c√¢y',
        'L√†m c·ªè v√† vun g·ªëc ƒë·ªãnh k·ª≥',
        'Theo d√µi v√† ph√≤ng tr·ª´ s√¢u b·ªánh'
      ]
    },
    { 
      stage: 'Ra hoa', 
      duration: '15-20 ng√†y',
      recommendations: [
        'ƒê·∫£m b·∫£o ƒë·ªß n∆∞·ªõc trong giai ƒëo·∫°n n√†y',
        'Tr√°nh s·ª≠ d·ª•ng thu·ªëc tr·ª´ s√¢u ·∫£nh h∆∞·ªüng ƒë·∫øn qu√° tr√¨nh th·ª• ph·∫•n',
        'B·ªï sung ph√¢n b√≥n l√° n·∫øu c·∫ßn thi·∫øt'
      ]
    },
    { 
      stage: 'Ph√°t tri·ªÉn b·∫Øp', 
      duration: '20-30 ng√†y',
      recommendations: [
        'Ti·∫øp t·ª•c cung c·∫•p ƒë·ªß n∆∞·ªõc v√† dinh d∆∞·ª°ng',
        'Ph√≤ng tr·ª´ s√¢u ƒë·ª•c b·∫Øp v√† c√°c lo·∫°i s√¢u b·ªánh kh√°c',
        'T·ªâa b·ªè c√°c b·∫Øp ph·ª• n·∫øu c·∫ßn'
      ]
    },
    { 
      stage: 'Ch√≠n', 
      duration: '20-30 ng√†y',
      recommendations: [
        'Gi·∫£m l∆∞·ª£ng n∆∞·ªõc t∆∞·ªõi',
        'Chu·∫©n b·ªã k·∫ø ho·∫°ch thu ho·∫°ch',
        'Thu ho·∫°ch khi h·∫°t ƒë√£ ch√≠n ho√†n to√†n'
      ]
    },
  ],
}


export default function CropCalendar() {
  const [selectedCrop, setSelectedCrop] = useState('rice')

  return (
    <div className="h-auto w-auto bg-gray-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-4xl shadow-lg rounded-lg bg-white">
        <CardHeader className="border-b">
          <CardTitle className="text-3xl font-extrabold text-gray-800 flex items-center">
            üå± L·ªãch M√πa V·ª•
          </CardTitle>
        </CardHeader>
        <CardContent className="py-6">
          <div className="flex items-center justify-between mb-6">
            <Select value={selectedCrop} onValueChange={setSelectedCrop}>
              <SelectTrigger className="w-60">
                <SelectValue placeholder="Ch·ªçn c√¢y tr·ªìng" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="rice">L√∫a</SelectItem>
                <SelectItem value="corn">Ng√¥</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="">
            <Table className="w-auto">
              <TableHeader>
                <TableRow>
                  <TableHead className="py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Giai ƒêo·∫°n</TableHead>
                  <TableHead className="py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Th·ªùi Gian</TableHead>
                  <TableHead className="py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Khuy·∫øn C√°o</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {cropData[selectedCrop].map((stage, index) => (
                  <TableRow key={index} className="hover:bg-gray-50 transition">
                    <TableCell className="py-2  whitespace-nowrap">
                      <span className="font-medium text-gray-700">{stage.stage}</span>
                    </TableCell>
                    <TableCell className="py-2 whitespace-nowrap text-gray-500">{stage.duration}</TableCell>
                    <TableCell className="py-2  whitespace-nowrap">
                      <Accordion type="single" collapsible>
                        <AccordionItem value={`item-${index}`}>
                          <AccordionTrigger className="flex items-center text-blue-600 hover:text-blue-800 transition">
                            Xem chi ti·∫øt
                          </AccordionTrigger>
                          <AnimatePresence>
                            <AccordionContent>
                              <motion.ul
                                className="list-disc pl-5 space-y-1 text-gray-600"
                                initial={{ opacity: 0, height: 0 }}
                                animate={{ opacity: 1, height: 'auto' }}
                                exit={{ opacity: 0, height: 0 }}
                                transition={{ duration: 0.3 }}
                              >
                                {stage.recommendations.map((rec, recIndex) => (
                                  <li key={recIndex} className='whitespace-break-spaces'>{rec}</li>
                                ))}
                              </motion.ul>
                            </AccordionContent>
                          </AnimatePresence>
                        </AccordionItem>
                      </Accordion>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}